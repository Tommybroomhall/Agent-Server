/**
 * FILE: src/db/models/Log.ts
 * ========================
 * LOG MODEL
 * 
 * PURPOSE:
 * Defines the MongoDB schema and interface for the Log collection.
 * Provides a detailed audit trail of all actions and events in the system,
 * supporting monitoring, debugging, analytics, and compliance requirements.
 * 
 * CONNECTIONS:
 * - Used by agentOrchestrator.ts to log agent activities
 * - Used by all agent handlers to record significant actions
 * - Used by webhookRouter.ts to track external service interactions
 * - Potentially used by security and monitoring tools for auditing
 * 
 * PRODUCTION BEHAVIOR:
 * 1. Records all significant agent activities with detailed context
 * 2. Tracks actions related to users, orders, and system processes
 * 3. Preserves flexible details appropriate to each action type
 * 4. Maintains timestamps for chronological analysis
 * 5. Supports event recreation and system troubleshooting
 * 
 * DATABASE IMPACT:
 * - Collection name: "logs"
 * - High write volume in production
 * - Should consider time-based partitioning for performance
 * - Will need retention and archiving policies
 * 
 * OPERATIONAL CONSIDERATIONS:
 * - Critical for system diagnosis and troubleshooting
 * - Important for security auditing and compliance
 * - Consider exporting to dedicated log analysis systems in production
 * - May need rate limiting or batching for high-volume operations
 */

import mongoose, { Document, Schema } from 'mongoose';

/**
 * INTERFACE: ILog
 * -------------
 * TypeScript interface for the Log document type.
 * Extends the Mongoose Document interface to enable strong typing.
 * 
 * FIELDS:
 * - agentType: Which agent generated this log entry
 * - action: Specific action or event being recorded
 * - userId: Optional reference to related user (if applicable)
 * - orderId: Optional reference to related order (if applicable)
 * - details: Flexible structure for action-specific context
 * - timestamp: When the action occurred
 */
export interface ILog extends Document {
  agentType: 'customer' | 'staff' | 'admin';
  action: string;
  userId?: mongoose.Types.ObjectId;
  orderId?: mongoose.Types.ObjectId;
  details: Record<string, any>;
  timestamp: Date;
}

/**
 * SCHEMA: LogSchema
 * --------------
 * Mongoose schema definition for the Log collection.
 * 
 * LOG EVENT TYPES (action field) include:
 * - agent_request: New request to an agent
 * - agent_response: Response generated by an agent
 * - agent_error: Error occurred during agent processing
 * - message_received: New message arrived from a user
 * - message_sent: Message was sent to a user
 * - order_status_change: Order status was updated
 * - webhook_received: External webhook was processed
 * - authentication_event: Login/logout/permission change
 * 
 * PRODUCTION CONSIDERATIONS:
 * - Should add indexes on timestamp, agentType, and action for querying
 * - Should implement data compression for efficient storage
 * - Consider implementing log rotation or TTL (Time To Live) policies
 */
const LogSchema = new Schema<ILog>(
  {
    // Classification fields
    agentType: { 
      type: String, 
      enum: ['customer', 'staff', 'admin'], 
      required: true 
    },
    action: { type: String, required: true },
    
    // Optional references to related entities
    userId: { type: Schema.Types.ObjectId, ref: 'User' },
    orderId: { type: Schema.Types.ObjectId, ref: 'Order' },
    
    // Contextual information specific to the action
    details: { type: Schema.Types.Mixed, required: true },
    
    // When the event occurred
    timestamp: { type: Date, default: Date.now },
  },
  { timestamps: true } // Adds createdAt/updatedAt (useful for log record creation vs event time)
);

// In production, add these indexes for query performance
// LogSchema.index({ timestamp: -1 });  // For chronological queries
// LogSchema.index({ action: 1, timestamp: -1 }); // For action-specific analysis
// LogSchema.index({ agentType: 1, action: 1, timestamp: -1 }); // For agent activity analysis

// Export the model with typing information
// Collection name in MongoDB will be "logs" (lowercase and pluralized)
export default mongoose.model<ILog>('Log', LogSchema);
